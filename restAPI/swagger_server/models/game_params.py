# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GameParams(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, level: int=None, time: int=None, side: str=None):  # noqa: E501
        """GameParams - a model defined in Swagger

        :param level: The level of this GameParams.  # noqa: E501
        :type level: int
        :param time: The time of this GameParams.  # noqa: E501
        :type time: int
        :param side: The side of this GameParams.  # noqa: E501
        :type side: str
        """
        self.swagger_types = {
            'level': int,
            'time': int,
            'side': str
        }

        self.attribute_map = {
            'level': 'level',
            'time': 'time',
            'side': 'side'
        }

        self._level = level
        self._time = time
        self._side = side

    @classmethod
    def from_dict(cls, dikt) -> 'GameParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gameParams of this GameParams.  # noqa: E501
        :rtype: GameParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self) -> int:
        """Gets the level of this GameParams.

        Set the strength of the chess engine  # noqa: E501

        :return: The level of this GameParams.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level: int):
        """Sets the level of this GameParams.

        Set the strength of the chess engine  # noqa: E501

        :param level: The level of this GameParams.
        :type level: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def time(self) -> int:
        """Gets the time of this GameParams.

        Set the time limit of the game  # noqa: E501

        :return: The time of this GameParams.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this GameParams.

        Set the time limit of the game  # noqa: E501

        :param time: The time of this GameParams.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def side(self) -> str:
        """Gets the side of this GameParams.

        Play for White or Black  # noqa: E501

        :return: The side of this GameParams.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side: str):
        """Sets the side of this GameParams.

        Play for White or Black  # noqa: E501

        :param side: The side of this GameParams.
        :type side: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side
